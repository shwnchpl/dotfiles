diff --git a/config.h b/config.h
new file mode 100644
index 0000000..7fa7480
--- /dev/null
+++ b/config.h
@@ -0,0 +1,163 @@
+/* See LICENSE file for copyright and license details. */
+
+#include <X11/XF86keysym.h>
+
+/* appearance */
+static const unsigned int borderpx  = 1;        /* border pixel of windows */
+static const unsigned int snap      = 32;       /* snap pixel */
+static const int showbar            = 1;        /* 0 means no bar */
+static const int topbar             = 1;        /* 0 means bottom bar */
+static const char *fonts[]          = { "monospace:size=10" };
+static const char dmenufont[]       = "monospace:size=10";
+static const char col_gray1[]       = "#222222";
+static const char col_gray2[]       = "#444444";
+static const char col_gray3[]       = "#bbbbbb";
+static const char col_gray4[]       = "#eeeeee";
+static const char col_cyan[]        = "#005577";
+static const char *colors[][3]      = {
+	/*               fg         bg         border   */
+	[SchemeNorm] = { col_gray3, col_gray1, col_gray2 },
+	[SchemeSel]  = { col_gray4, col_cyan,  col_cyan  },
+};
+
+/* tagging */
+static const char *tags[] = { "1", "2", "3", "4", "5", "6", "7", "8", "9" };
+
+static const char vbox_vm[] = "VirtualBox Machine";
+static const Rule rules[] = {
+	/* xprop(1):
+	 *	WM_CLASS(STRING) = instance, class
+	 *	WM_NAME(STRING) = title
+	 */
+	/* class      instance    title       tags mask     isfloating   monitor */
+	{ vbox_vm,    NULL,       NULL,       1 << 8,       0,           -1 },
+};
+
+/* layout(s) */
+static const float mfact     = 0.55; /* factor of master area size [0.05..0.95] */
+static const int nmaster     = 1;    /* number of clients in master area */
+static const int resizehints = 0;    /* 1 means respect size hints in tiled resizals */
+static const int lockfullscreen = 1; /* 1 will force focus on the fullscreen window */
+
+static const Layout layouts[] = {
+	/* symbol     arrange function */
+	{ "[]=",      tile },    /* first entry is default */
+	{ "><>",      NULL },    /* no layout function means floating behavior */
+	{ "[M]",      monocle },
+};
+
+/* key definitions */
+#define MODKEY Mod1Mask
+#define SUPERKEY Mod4Mask
+#define TAGKEYS(KEY,TAG) \
+	{ MODKEY,                       KEY,      view,           {.ui = 1 << TAG} }, \
+	{ MODKEY|ControlMask,           KEY,      toggleview,     {.ui = 1 << TAG} }, \
+	{ MODKEY|ShiftMask,             KEY,      tag,            {.ui = 1 << TAG} }, \
+	{ MODKEY|ControlMask|ShiftMask, KEY,      toggletag,      {.ui = 1 << TAG} },
+
+/* helper for spawning shell commands in the pre dwm-5.0 fashion */
+#define SHCMD(cmd) { .v = (const char*[]){ "/bin/sh", "-c", cmd, NULL } }
+
+/* commands */
+static char dmenumon[2] = "0"; /* component of dmenucmd, manipulated in spawn() */
+static const char *dmenucmd[] = { "dmenu_run", "-m", dmenumon, "-fn", dmenufont, "-nb", col_gray1, "-nf", col_gray3, "-sb", col_cyan, "-sf", col_gray4, NULL };
+static const char *termcmd[]  = { "st", NULL };
+static const char *lockcmd[] = { "slock", NULL };
+static const char *quitcmd[] = { "killall", "xinit", NULL };
+static const char *volmutecmd[] = { "amixer", "sset", "Master", "toggle", NULL };
+static const char *vollowercmd[] = { "amixer", "sset", "Master", "10%-", NULL };
+static const char *volraisecmd[] = { "amixer", "sset", "Master", "10%+", NULL };
+static const char *dispmaincmd[] = { "disp.sh", "main", NULL };
+static const char *disptvcmd[] = { "disp.sh", "tv", NULL };
+static const char *dispbothcmd[] = { "disp.sh", "both", NULL };
+static const char *dispdualcmd[] = { "disp.sh", "dual", NULL };
+static const char *browsercmd[] = { "firefox", NULL };
+static const char *brilowercmd[] = { "xbacklight", "-10%", NULL };
+static const char *briraisecmd[] = { "xbacklight", "+10%", NULL };
+
+#define _k_mute XF86XK_AudioMute
+#define _k_vold XF86XK_AudioLowerVolume
+#define _k_volu XF86XK_AudioRaiseVolume
+
+#define _k_brid XF86XK_MonBrightnessDown
+#define _k_briu XF86XK_MonBrightnessUp
+
+static Key keys[] = {
+	/* modifier                     key        function        argument */
+	{ MODKEY,                       XK_p,      spawn,          {.v = dmenucmd } },
+	{ MODKEY|ShiftMask,             XK_Return, spawn,          {.v = termcmd } },
+	{ MODKEY|ShiftMask,             XK_p,      spawn,          {.v = browsercmd } },
+	{ MODKEY,                       XK_b,      togglebar,      {0} },
+	{ MODKEY,                       XK_j,      focusstack,     {.i = +1 } },
+	{ MODKEY,                       XK_k,      focusstack,     {.i = -1 } },
+	{ MODKEY,                       XK_i,      incnmaster,     {.i = +1 } },
+	{ MODKEY,                       XK_d,      incnmaster,     {.i = -1 } },
+	{ MODKEY,                       XK_h,      setmfact,       {.f = -0.05} },
+	{ MODKEY,                       XK_l,      setmfact,       {.f = +0.05} },
+	{ MODKEY,                       XK_Return, zoom,           {0} },
+	{ MODKEY,                       XK_Tab,    view,           {0} },
+	{ MODKEY|ShiftMask,             XK_c,      killclient,     {0} },
+	{ MODKEY,                       XK_t,      setlayout,      {.v = &layouts[0]} },
+	{ MODKEY,                       XK_f,      setlayout,      {.v = &layouts[1]} },
+	{ MODKEY,                       XK_m,      setlayout,      {.v = &layouts[2]} },
+	{ MODKEY,                       XK_space,  setlayout,      {0} },
+	{ MODKEY|ShiftMask,             XK_space,  togglefloating, {0} },
+	{ MODKEY,                       XK_0,      view,           {.ui = ~0 } },
+	{ MODKEY|ShiftMask,             XK_0,      tag,            {.ui = ~0 } },
+	{ MODKEY,                       XK_comma,  focusmon,       {.i = -1 } },
+	{ MODKEY,                       XK_period, focusmon,       {.i = +1 } },
+	{ MODKEY|ShiftMask,             XK_comma,  tagmon,         {.i = -1 } },
+	{ MODKEY|ShiftMask,             XK_period, tagmon,         {.i = +1 } },
+	TAGKEYS(                        XK_1,                      0)
+	TAGKEYS(                        XK_2,                      1)
+	TAGKEYS(                        XK_3,                      2)
+	TAGKEYS(                        XK_4,                      3)
+	TAGKEYS(                        XK_5,                      4)
+	TAGKEYS(                        XK_6,                      5)
+	TAGKEYS(                        XK_7,                      6)
+	TAGKEYS(                        XK_8,                      7)
+	TAGKEYS(                        XK_9,                      8)
+
+        /* Custom bindings. */
+	{ MODKEY|ShiftMask,             XK_l,      spawn,          {.v = lockcmd } },
+	{ SUPERKEY,                     XK_w,      moveresizep,    {.v = (float []){ 0.08, 0.08, 0.84, 0.84 } } },
+	{ SUPERKEY,                     XK_p,      moveresizep,    {.v = (float []){ 0.225, 0.08, 0.55, 0.84 } } },
+	{ SUPERKEY,                     XK_a,      moveresizep,    {.v = (float []){ 0.02, 0.02, 0.46, 0.46 } } },
+	{ SUPERKEY,                     XK_s,      moveresizep,    {.v = (float []){ 0.52, 0.02, 0.46, 0.46 } } },
+	{ SUPERKEY,                     XK_z,      moveresizep,    {.v = (float []){ 0.02, 0.52, 0.46, 0.46 } } },
+	{ SUPERKEY,                     XK_x,      moveresizep,    {.v = (float []){ 0.52, 0.52, 0.46, 0.46 } } },
+	{ SUPERKEY,                     XK_c,      moveresizep,    {.v = (float []){ 0.25, 0.25, 0.50, 0.50 } } },
+	{ MODKEY|ShiftMask,             XK_r,      quit,           {0} },
+	{ MODKEY|ShiftMask,             XK_q,      spawn,          { .v = quitcmd } },
+	{ SUPERKEY,                     XK_comma,  spawn,          { .v = disptvcmd } },
+	{ SUPERKEY,                     XK_period, spawn,          { .v = dispmaincmd } },
+	{ SUPERKEY,                     XK_slash,  spawn,          { .v = dispdualcmd } },
+	{ SUPERKEY,                     XK_semicolon,spawn,        { .v = dispbothcmd } },
+	{ 0,                            _k_mute,   spawn,          { .v = volmutecmd } },
+	{ 0,                            _k_vold,   spawn,          { .v = vollowercmd } },
+	{ 0,                            _k_volu,   spawn,          { .v = volraisecmd } },
+	{ 0,                            _k_brid,   spawn,          { .v = brilowercmd } },
+	{ 0,                            _k_briu,   spawn,          { .v = briraisecmd } },
+};
+
+#undef _k_mute
+#undef _k_vold
+#undef _k_volu
+
+/* button definitions */
+/* click can be ClkTagBar, ClkLtSymbol, ClkStatusText, ClkWinTitle, ClkClientWin, or ClkRootWin */
+static Button buttons[] = {
+	/* click                event mask      button          function        argument */
+	{ ClkLtSymbol,          0,              Button1,        setlayout,      {0} },
+	{ ClkLtSymbol,          0,              Button3,        setlayout,      {.v = &layouts[2]} },
+	{ ClkWinTitle,          0,              Button2,        zoom,           {0} },
+	{ ClkStatusText,        0,              Button2,        spawn,          {.v = termcmd } },
+	{ ClkClientWin,         MODKEY,         Button1,        movemouse,      {0} },
+	{ ClkClientWin,         MODKEY,         Button2,        togglefloating, {0} },
+	{ ClkClientWin,         MODKEY,         Button3,        resizemouse,    {0} },
+	{ ClkTagBar,            0,              Button1,        view,           {0} },
+	{ ClkTagBar,            0,              Button3,        toggleview,     {0} },
+	{ ClkTagBar,            MODKEY,         Button1,        tag,            {0} },
+	{ ClkTagBar,            MODKEY,         Button3,        toggletag,      {0} },
+};
+
diff --git a/dwm.c b/dwm.c
index 5e4d494..9caa7c9 100644
--- a/dwm.c
+++ b/dwm.c
@@ -89,6 +89,7 @@ struct Client {
 	float mina, maxa;
 	int x, y, w, h;
 	int oldx, oldy, oldw, oldh;
+	float rx, ry, rw, rh;
 	int basew, baseh, incw, inch, maxw, maxh, minw, minh;
 	int bw, oldbw;
 	unsigned int tags;
@@ -142,6 +143,7 @@ typedef struct {
 } Rule;
 
 /* function declarations */
+static void applyrelativesize(Client *c);
 static void applyrules(Client *c);
 static int applysizehints(Client *c, int *x, int *y, int *w, int *h, int interact);
 static void arrange(Monitor *m);
@@ -184,6 +186,7 @@ static void maprequest(XEvent *e);
 static void monocle(Monitor *m);
 static void motionnotify(XEvent *e);
 static void movemouse(const Arg *arg);
+static void moveresizep(const Arg *arg);
 static Client *nexttiled(Client *c);
 static void pop(Client *);
 static void propertynotify(XEvent *e);
@@ -207,6 +210,7 @@ static void seturgent(Client *c, int urg);
 static void showhide(Client *c);
 static void sigchld(int unused);
 static void spawn(const Arg *arg);
+static void storerelativesize(Client *c);
 static void tag(const Arg *arg);
 static void tagmon(const Arg *arg);
 static void tile(Monitor *);
@@ -276,6 +280,16 @@ static Window root, wmcheckwin;
 struct NumTags { char limitexceeded[LENGTH(tags) > 31 ? -1 : 1]; };
 
 /* function implementations */
+void
+applyrelativesize(Client *c)
+{
+	resizeclient(c,
+		c->mon->mx + c->mon->mw * c->rx,
+		c->mon->my + c->mon->mh * c->ry,
+		c->mon->mw * c->rw,
+		c->mon->mh * c->rh);
+}
+
 void
 applyrules(Client *c)
 {
@@ -565,9 +579,12 @@ configurenotify(XEvent *e)
 			drw_resize(drw, sw, bh);
 			updatebars();
 			for (m = mons; m; m = m->next) {
-				for (c = m->clients; c; c = c->next)
+				for (c = m->clients; c; c = c->next) {
 					if (c->isfullscreen)
 						resizeclient(c, m->mx, m->my, m->mw, m->mh);
+					else if (c->isfloating)
+						applyrelativesize(c);
+				}
 				XMoveResizeWindow(dpy, m->barwin, m->wx, m->by, m->ww, bh);
 			}
 			focus(NULL);
@@ -1040,6 +1057,8 @@ manage(Window w, XWindowAttributes *wa)
 		applyrules(c);
 	}
 
+	storerelativesize(c);
+
 	if (c->x + WIDTH(c) > c->mon->mx + c->mon->mw)
 		c->x = c->mon->mx + c->mon->mw - WIDTH(c);
 	if (c->y + HEIGHT(c) > c->mon->my + c->mon->mh)
@@ -1193,6 +1212,24 @@ movemouse(const Arg *arg)
 	}
 }
 
+static void
+moveresizep(const Arg *arg)
+{
+	if(!(selmon->sel && arg && arg->v))
+		return;
+
+	selmon->sel->isfloating = 1;
+
+	resize(selmon->sel,
+		selmon->mx + selmon->mw * ((float *)arg->v)[0],
+		selmon->my + selmon->mh * ((float *)arg->v)[1],
+		selmon->mw * ((float *)arg->v)[2],
+		selmon->mh * ((float *)arg->v)[3],
+		True);
+
+	arrange(selmon);
+}
+
 Client *
 nexttiled(Client *c)
 {
@@ -1282,6 +1319,7 @@ resizeclient(Client *c, int x, int y, int w, int h)
 	c->oldy = c->y; c->y = wc.y = y;
 	c->oldw = c->w; c->w = wc.width = w;
 	c->oldh = c->h; c->h = wc.height = h;
+	storerelativesize(c);
 	wc.border_width = c->bw;
 	XConfigureWindow(dpy, c->win, CWX|CWY|CWWidth|CWHeight|CWBorderWidth, &wc);
 	configure(c);
@@ -1420,6 +1458,8 @@ sendmon(Client *c, Monitor *m)
 	c->tags = m->tagset[m->seltags]; /* assign tags of target monitor */
 	attach(c);
 	attachstack(c);
+	if (c->isfloating)
+		applyrelativesize(c);
 	focus(NULL);
 	arrange(NULL);
 }
@@ -1653,6 +1693,15 @@ spawn(const Arg *arg)
 	}
 }
 
+void
+storerelativesize(Client *c)
+{
+	c->rx = (c->x - c->mon->mx) / (float)c->mon->mw;
+	c->ry = (c->y - c->mon->my) / (float)c->mon->mh;
+	c->rw = c->w / (float)c->mon->mw;
+	c->rh = c->h / (float)c->mon->mh;
+}
+
 void
 tag(const Arg *arg)
 {
